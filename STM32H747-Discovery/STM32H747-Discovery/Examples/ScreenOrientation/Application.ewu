$version 9.30

// This is the root component of the entire GUI application.
$rect <20,20,220,60>
$output false
class Application_Landscape : Core::Root
{
  $rect <20,630,220,670>
  inherited property Bounds = <0,0,800,480>;

  $rect <230,500,430,540>
  inherited method UpdateLayout()
  {
    /* initialize the rect effects depending on the current position of the ball images and depending on the given size */
    RectEffectRed.Value1    = BallRed.Bounds;
    RectEffectRed.Value2    = rect( BallRed.Bounds.x1, aSize.y - BallRed.Bounds.h, BallRed.Bounds.x2, aSize.y );
    RectEffectYellow.Value1 = BallYellow.Bounds;
    RectEffectYellow.Value2 = rect( BallYellow.Bounds.x1, aSize.y - BallYellow.Bounds.h, BallYellow.Bounds.x2, aSize.y );
    RectEffectGreen.Value1  = BallGreen.Bounds;
    RectEffectGreen.Value2  = rect( BallGreen.Bounds.x1, aSize.y - BallGreen.Bounds.h, BallGreen.Bounds.x2, aSize.y );

    /* start all rect effects */
    RectEffectRed.Enabled    = true;
    RectEffectYellow.Enabled = true;
    RectEffectGreen.Enabled  = true;

    /* set the screen size text */
    SizeText.String = string( Bounds.w ) + "x" + string( Bounds.h );

  }

  // This is the application class prepared for the landscape mode.
  // 
  // It contains three RectEffects to animate the three ball images. The start- and \
  // end-coordinates of the animation are calculated within the method UpdateLayout().
  // 
  // A touch handler triggers the slot method 'OnTouch' which moves the cross image \
  // to the touched position and which prints the touch position as text.
  // This helps to verify, that your touch driver on the target provides correct \
  // coordinates.
  note legend Note1
  {
    attr Bounds = <830,10,1180,300>;
  }

  // This is a generic touch handler.
  $rect <20,20,160,60>
  object Core::SimpleTouchHandler SimpleTouchHandler
  {
    preset Point4 = <0,0>;
    preset Point3 = <799,0>;
    preset Point2 = <799,479>;
    preset Point1 = <0,479>;
    preset OnDrag = OnTouch;
    preset OnPress = OnTouch;
  }

  // This is a filled rectangle view.
  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,0,800,480>;
    preset ColorBL = #000000FF;
    preset ColorBR = #000000FF;
    preset ColorTR = #0000FFFF;
    preset ColorTL = #0000FFFF;
  }

  // This is an image view.
  $rect <20,20,160,60>
  object Views::Image BallRed
  {
    preset Bounds = <50,100,110,160>;
    preset Color = #FF483FFF;
    preset Bitmap = Application::Ball;
  }

  // This is an image view.
  $rect <20,20,160,60>
  object Views::Image BallYellow
  {
    preset Bounds = <140,190,200,250>;
    preset Color = #FFFB08FF;
    preset Bitmap = Application::Ball;
  }

  // This is an image view.
  $rect <20,20,160,60>
  object Views::Image BallGreen
  {
    preset Bounds = <670,160,730,220>;
    preset Color = #1DDA30FF;
    preset Bitmap = Application::Ball;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Caption
  {
    preset Bounds = <60,10,740,60>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Screen Orientation Sample";
    preset Font = Application::FontLarge;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text TouchText
  {
    preset Bounds = <200,256,600,287>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Touch Position";
    preset Font = Application::FontSmall;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Footer
  {
    preset Bounds = <200,440,600,475>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "www.embedded-wizard.de";
    preset Font = Application::FontSmall;
    preset Color = #FFFFFFFF;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Footer1
  {
    preset Bounds = <0,0,50,480>;
    preset Orientation = Views::Orientation.Rotated_270;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Embedded Wizard";
    preset Font = Application::FontSmall;
    preset Color = #FFFFFFFF;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Footer2
  {
    preset Bounds = <750,0,800,480>;
    preset Orientation = Views::Orientation.Rotated_90;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Embedded Wizard";
    preset Font = Application::FontSmall;
    preset Color = #FFFFFFFF;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text PosText
  {
    preset Bounds = <200,287,600,330>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "X: -- Y: --";
    preset Font = Application::FontLarge;
  }

  // This is an image view.
  $rect <20,20,160,60>
  object Views::Image Cross
  {
    preset Bounds = <590,330,655,395>;
    preset Bitmap = Application::Cross;
  }

  // This is a move and resize rectangle effect.
  $rect <20,500,220,540>
  object Effects::RectEffect RectEffectRed
  {
    preset Symmetric = true;
    preset Timing = Effects::Timing.EaseIn_FastOut;
    preset CycleDuration = 1200;
    preset Outlet = ^BallRed.Bounds;
  }

  // This is a move and resize rectangle effect.
  $rect <20,540,220,580>
  object Effects::RectEffect RectEffectYellow
  {
    preset Symmetric = true;
    preset Timing = Effects::Timing.EaseIn_FastOut;
    preset CycleDuration = 1200;
    preset InitialDelay = 200;
    preset Outlet = ^BallYellow.Bounds;
  }

  // This is a move and resize rectangle effect.
  $rect <20,580,220,620>
  object Effects::RectEffect RectEffectGreen
  {
    preset Symmetric = true;
    preset Timing = Effects::Timing.EaseIn_FastOut;
    preset CycleDuration = 1200;
    preset InitialDelay = 500;
    preset Outlet = ^BallGreen.Bounds;
  }

  // This is a slot method connected with the touch handler. Each time the user touches \
  // on the screen, this method is called. As a result, the position of the cross \
  // image will be changed and the coordinates are shown as text.
  $rect <230,540,430,580>
  slot OnTouch
  {
    sender; /* the method is called from the sender object */

    /* modify the position of the image:
       get the touch position from the touch handler, adjust the position by half size of the image,
       in order to put the center of the image to the touched position */
    Cross.Bounds.origin = SimpleTouchHandler.CurrentPos - point ( Cross.Bounds.w / 2, Cross.Bounds.h / 2 );

    /* print the current touch position */
    PosText.String = "X: " + string( SimpleTouchHandler.CurrentPos.x ) + " Y: " + string( SimpleTouchHandler.CurrentPos.y );



  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text ModeText
  {
    preset Bounds = <200,80,600,140>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Landscape";
    preset Font = Application::FontLarge;
  }

  // Appears the right part empty?
  // 
  // If the canvas area (= the content within the thick blue frame) is cut on the \
  // right side, the screen size of the currently selected profile does not fit to \
  // size of the application.
  // 
  // Just select a profile with ScreenOrientation 'Normal' or 'Rotated_180' - they \
  // are using a screen size in landscape mode!
  note legend Note2
  {
    attr Bounds = <870,310,1180,550>;
  }

  note arrow Note
  {
    attr Point1 = <780,340>;
    attr Point2 = <870,430>;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text ScreenText
  {
    preset Bounds = <200,160,600,192>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Screen Size";
    preset Font = Application::FontSmall;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text SizeText
  {
    preset Bounds = <200,192,600,234>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset Font = Application::FontLarge;
  }

  $rect <430,500,630,540>
  object Core::KeyPressHandler KeyHandler
  {
    preset OnPress = OnKeyPressed;
    preset Filter = Core::KeyCode.AnyKey;
    preset OnHold = OnKeyPressed;
  }

  $rect <430,540,630,580>
  slot OnKeyPressed
  {
    sender; /* the method is called from the sender object */

    var point pos = Cross.Bounds.center;

    /* move image just one pixel into desired direction */
    switch ( KeyHandler.Code )
    {
      case Core::KeyCode.Left:  pos = pos - <1,0>;
      case Core::KeyCode.Right: pos = pos + <1,0>;
      case Core::KeyCode.Up:    pos = pos - <0,1>;
      case Core::KeyCode.Down:  pos = pos + <0,1>;
      case Core::KeyCode.Key4:  pos = pos - <1,0>;
      case Core::KeyCode.Key6:  pos = pos + <1,0>;
      case Core::KeyCode.Key8:  pos = pos - <0,1>;
      case Core::KeyCode.Key2:  pos = pos + <0,1>;
      default:
        ;
    }

    /* limit position of cross */
    if ( pos.x < 0 ) pos.x = 0;
    if ( pos.x >= Bounds.w ) pos.x = Bounds.w - 1;
    if ( pos.y < 0 ) pos.y = 0;
    if ( pos.y >= Bounds.h ) pos.y = Bounds.h - 1;

    /* modify the position of the image */
    Cross.Bounds.origin = pos - point ( Cross.Bounds.w / 2, Cross.Bounds.h / 2 );

    /* print the current cross position */
    PosText.String = "X: " + string( pos.x ) + " Y: " + string( pos.y );


  }
}

// This is a bitmap resource.
$rect <440,60,640,100>
$output false
resource Resources::Bitmap Cross
{
  attr bitmapfile FileName = .\Res\Cross.png;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapdithering Dithering = Auto;
}

// This is a bitmap resource.
$rect <440,20,640,60>
$output false
resource Resources::Bitmap Ball
{
  attr bitmapfile FileName = .\Res\Ball.png;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapdithering Dithering = Auto;
}

// Font resource for large font - used for the caption text items.
$rect <230,20,430,60>
$output false
resource Resources::Font FontLarge
{
  attr fontname FontName = Arial;
  attr fontheight Height = 42;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
}

// Font resource for small font - used for the description text items.
$rect <230,60,430,100>
$output false
resource Resources::Font FontSmall
{
  attr fontname FontName = Arial;
  attr fontheight Height = 24;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
}

// This is the root component of the entire GUI application.
$rect <20,60,220,100>
$output false
class Application_Portrait : Core::Root
{
  $rect <510,130,710,170>
  inherited property Bounds = <0,0,480,800>;

  $rect <510,180,710,220>
  inherited method UpdateLayout()
  {
    /* initialize the rect effects depending on the current position of the ball images and depending on the given size */
    RectEffectRed.Value1    = BallRed.Bounds;
    RectEffectRed.Value2    = rect( BallRed.Bounds.x1, aSize.y - BallRed.Bounds.h, BallRed.Bounds.x2, aSize.y );
    RectEffectYellow.Value1 = BallYellow.Bounds;
    RectEffectYellow.Value2 = rect( BallYellow.Bounds.x1, aSize.y - BallYellow.Bounds.h, BallYellow.Bounds.x2, aSize.y );
    RectEffectGreen.Value1  = BallGreen.Bounds;
    RectEffectGreen.Value2  = rect( BallGreen.Bounds.x1, aSize.y - BallGreen.Bounds.h, BallGreen.Bounds.x2, aSize.y );

    /* start all rect effects */
    RectEffectRed.Enabled    = true;
    RectEffectYellow.Enabled = true;
    RectEffectGreen.Enabled  = true;

    /* set the screen size text */
    SizeText.String = string( Bounds.w ) + "x" + string( Bounds.h );

  }

  // This is a generic touch handler.
  $rect <20,20,160,60>
  object Core::SimpleTouchHandler SimpleTouchHandler
  {
    preset Point4 = <0,0>;
    preset Point3 = <480,0>;
    preset Point2 = <480,800>;
    preset Point1 = <0,800>;
    preset OnDrag = OnTouch;
    preset OnPress = OnTouch;
  }

  // This is a filled rectangle view.
  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,0,480,800>;
    preset ColorBL = #000000FF;
    preset ColorBR = #000000FF;
    preset ColorTR = #0000FFFF;
    preset ColorTL = #0000FFFF;
  }

  // This is an image view.
  $rect <20,20,160,60>
  object Views::Image BallRed
  {
    preset Bounds = <10,400,70,460>;
    preset Color = #FF483FFF;
    preset Bitmap = Application::Ball;
  }

  // This is an image view.
  $rect <20,20,160,60>
  object Views::Image BallYellow
  {
    preset Bounds = <70,520,130,580>;
    preset Color = #FFFB08FF;
    preset Bitmap = Application::Ball;
  }

  // This is an image view.
  $rect <20,20,160,60>
  object Views::Image BallGreen
  {
    preset Bounds = <400,420,460,480>;
    preset Color = #1DDA30FF;
    preset Bitmap = Application::Ball;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Caption
  {
    preset Bounds = <0,10,480,90>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Screen Orientation Sample";
    preset Font = Application::FontLarge;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text TouchText
  {
    preset Bounds = <100,370,380,400>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Touch Position";
    preset Font = Application::FontSmall;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Footer
  {
    preset Bounds = <100,760,380,800>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "www.embedded-wizard.de";
    preset Font = Application::FontSmall;
    preset Color = #FFFFFFFF;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Footer1
  {
    preset Bounds = <0,320,50,800>;
    preset Orientation = Views::Orientation.Rotated_270;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Embedded Wizard";
    preset Font = Application::FontSmall;
    preset Color = #FFFFFFFF;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text Footer2
  {
    preset Bounds = <430,320,480,800>;
    preset Orientation = Views::Orientation.Rotated_90;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Embedded Wizard";
    preset Font = Application::FontSmall;
    preset Color = #FFFFFFFF;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text PosText
  {
    preset Bounds = <100,400,380,440>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "X: -- Y: --";
    preset Font = Application::FontLarge;
  }

  // This is an image view.
  $rect <20,20,160,60>
  object Views::Image Cross
  {
    preset Bounds = <330,600,395,665>;
    preset Bitmap = Application::Cross;
  }

  // This is a move and resize rectangle effect.
  $rect <510,0,710,40>
  object Effects::RectEffect RectEffectRed
  {
    preset Symmetric = true;
    preset Timing = Effects::Timing.EaseIn_FastOut;
    preset CycleDuration = 1200;
    preset Outlet = ^BallRed.Bounds;
  }

  // This is a move and resize rectangle effect.
  $rect <510,40,710,80>
  object Effects::RectEffect RectEffectYellow
  {
    preset Symmetric = true;
    preset Timing = Effects::Timing.EaseIn_FastOut;
    preset CycleDuration = 1200;
    preset InitialDelay = 200;
    preset Outlet = ^BallYellow.Bounds;
  }

  // This is a move and resize rectangle effect.
  $rect <510,80,710,120>
  object Effects::RectEffect RectEffectGreen
  {
    preset Symmetric = true;
    preset Timing = Effects::Timing.EaseIn_FastOut;
    preset CycleDuration = 1200;
    preset InitialDelay = 500;
    preset Outlet = ^BallGreen.Bounds;
  }

  // This is a slot method connected with the touch handler. Each time the user touches \
  // on the screen, this method is called. As a result, the position of the cross \
  // image will be changed and the coordinates are shown as text.
  $rect <510,220,710,260>
  slot OnTouch
  {
    sender; /* the method is called from the sender object */

    /* modify the position of the image:
       get the touch position from the touch handler, adjust the position by half size of the image,
       in order to put the center of the image to the touched position */
    Cross.Bounds.origin = SimpleTouchHandler.CurrentPos - point ( Cross.Bounds.w / 2, Cross.Bounds.h / 2 );

    /* print the current touch position */
    PosText.String = "X: " + string( SimpleTouchHandler.CurrentPos.x ) + " Y: " + string( SimpleTouchHandler.CurrentPos.y );



  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text ModeText
  {
    preset Bounds = <100,120,380,160>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Portrait Mode";
    preset Font = Application::FontLarge;
  }

  // This is the application class prepared for the portrait mode.
  // 
  // It contains three RectEffects to animate the three ball images. The start- and \
  // end-coordinates of the animation are calculated within the method UpdateLayout().
  // 
  // A touch handler triggers the slot method 'OnTouch' which moves the cross image \
  // to the touched position and which prints the touch position as text.
  // This helps to verify, that your touch driver on the target provides correct \
  // coordinates.
  note legend Note1
  {
    attr Bounds = <520,280,930,510>;
  }

  // Appears the lower part empty?
  // 
  // If the canvas area (= the content within the thick blue frame) is cut on the \
  // lower side, the screen size of the currently selected profile does not fit to \
  // size of the application.
  // 
  // Just select a profile with ScreenOrientation 'Rotated_90' or 'Rotated_270' - \
  // they are using a screen size in portrait mode!
  note legend Note2
  {
    attr Bounds = <580,530,930,750>;
  }

  note arrow Note
  {
    attr Point1 = <460,650>;
    attr Point2 = <580,600>;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text ScreenText
  {
    preset Bounds = <100,250,380,280>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset String = "Screen Size";
    preset Font = Application::FontSmall;
  }

  // This is an ordinary text view.
  $rect <20,20,160,60>
  object Views::Text SizeText
  {
    preset Bounds = <100,280,380,320>;
    preset Alignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset Font = Application::FontLarge;
  }

  $rect <720,180,920,220>
  object Core::KeyPressHandler KeyHandler
  {
    preset OnPress = OnKeyPressed;
    preset Filter = Core::KeyCode.AnyKey;
    preset OnHold = OnKeyPressed;
  }

  $rect <720,220,920,260>
  slot OnKeyPressed
  {
    sender; /* the method is called from the sender object */

    var point pos = Cross.Bounds.center;

    /* move image just one pixel into desired direction */
    switch ( KeyHandler.Code )
    {
      case Core::KeyCode.Left:  pos = pos - <1,0>;
      case Core::KeyCode.Right: pos = pos + <1,0>;
      case Core::KeyCode.Up:    pos = pos - <0,1>;
      case Core::KeyCode.Down:  pos = pos + <0,1>;
      case Core::KeyCode.Key4:  pos = pos - <1,0>;
      case Core::KeyCode.Key6:  pos = pos + <1,0>;
      case Core::KeyCode.Key8:  pos = pos - <0,1>;
      case Core::KeyCode.Key2:  pos = pos + <0,1>;
      default:
        ;
    }

    /* limit position of cross */
    if ( pos.x < 0 ) pos.x = 0;
    if ( pos.x >= Bounds.w ) pos.x = Bounds.w - 1;
    if ( pos.y < 0 ) pos.y = 0;
    if ( pos.y >= Bounds.h ) pos.y = Bounds.h - 1;

    /* modify the position of the image */
    Cross.Bounds.origin = pos - point ( Cross.Bounds.w / 2, Cross.Bounds.h / 2 );

    /* print the current cross position */
    PosText.String = "X: " + string( pos.x ) + " Y: " + string( pos.y );


  }
}

// This is the unit 'Application' of the 'ScreenOrientation' example.
// 
// The unit contains two different application classes: One for the landscape mode \
// (width > height) and one for the portrait mode (height > width).
// Each of them implements the appearance and the behavior of the simple UI application.
// 
// Additionally, the unit contains the necessary resources for the sample: Two different \
// font resources and two bitmap resources.
// The font resources are used to display text views, bitmap resources are used within \
// image views.
// 
// You can double-click on one of the application bricks to open the corresponding \
// class within the Composer.
note legend Note1
{
  attr Bounds = <10,130,670,360>;
}
