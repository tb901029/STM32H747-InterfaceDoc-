$version 9.30

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,70,240,110>
unit Core
{
  attr Directory = $Mosaic;
}

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,110,240,150>
unit Resources
{
  attr Directory = $Mosaic;
}

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,150,240,190>
unit Graphics
{
  attr Directory = $Mosaic;
}

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,190,240,230>
unit Effects
{
  attr Directory = $Mosaic;
}

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,230,240,270>
unit Views
{
  attr Directory = $Mosaic;
}

// The unit 'Charts' contains a bundle of UI components to display graphs and chart \
// diagrams.
$rect <40,270,240,310>
unit Charts
{
  attr Directory = $Mosaic\Charts;
}


$rect <40,310,240,350>
unit WidgetSet
{
  attr Directory = $Mosaic;
}

// The 'default' Language. Each project has to contain at least one language brick \
// called 'Default'
$rect <540,70,740,110>
language Default;

// The unit of the application class
$rect <40,430,240,470>
unit Application
{
  attr Directory = .\;
}

$rect <40,470,240,510>
unit ChartsDemo
{
  attr Directory = .\;
}

// Mosaic Framework
note group Note1
{
  attr Bounds = <20,20,260,370>;
}

// Profile Configuration
note group Note2
{
  attr Bounds = <270,20,510,130>;
}

// Languages
note group Note3
{
  attr Bounds = <520,20,760,130>;
}

// Project Units
note group Note5
{
  attr Bounds = <20,380,260,530>;
}

// The 'ChartsDemo' sample application demonstrates the possibilities and the usage \
// of the following chart classes:
//
// Charts::LineChart - The class 'LineChart' implements a GUI component for displaying \
// a complete line chart diagram. The appearance of the line chart can be adapted \
// very flexible - all ingredients like background, grid, dots and lines can be configured \
// individually.
//
// Charts::BarChart - The class 'BarChart' implements a GUI component for displaying \
// a classic bar chart diagram. The appearance of the grid lines, the single bars \
// and the spacing between the bars can be configured easily.
//
// Charts::PieChart - The class 'PieChart' implements a GUI component for displaying \
// a pie chart diagram. The appearance of the pie chart can be adapted to your needs \
// - a set of predefined pie segments can be used or you can choose your own pie \
// images.
//
// All chart diagrams present the same type of data. The class Charts::Record and \
// Charts::RecordList are used to store a set of data values and their displaying \
// colors.
//
// This chart demo application is designed for a screen size of 800x480 pixels.
//
// You can double-click on the 'ChartsDemo' brick to open the unit within the Composer \
// and to analyze the implementation.
//
// To start the application within the Prototyper, press 'Ctrl'+'F5'.
note legend Note
{
  attr Bounds = <270,140,760,640>;
}

// This is a profile member for the project. This profile controls the code generation \
// for the target system.
$rect <290,70,490,110>
profile STM32 : STM.STM32.RGB565
{
  attr ScreenOrientation = Normal;
  attr ScreenSize = <800,480>;
  attr Optimization = High;
  attr ApplicationClass = Application::Application;
  attr ModeOfBitmapResources = Compressed;
  attr ModeOfStringConstants = Compressed;
  attr OutputDirectory = ..\..\Application\GeneratedCode;
  attr CleanOutputDirectories = true;

  $rect <10,10,154,50>
  macro Author = "Dipl. Ing. Paul Banach and Dipl. Ing. Manfred Schweyer, Copyright (C) TARA Systems GmbH";
}
